<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.ac.big.bigd.webservice.mapper.gsa.SampleMapper">
    <resultMap id="Sample" type="Sample">
        <id column="sample_id" property="sampleId" jdbcType="INTEGER"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="accession" property="accession" jdbcType="VARCHAR"/>
        <result column="title" property="title" jdbcType="VARCHAR"/>
        <result column="user_id" property="userId" jdbcType="INTEGER"/>
        <result column="prj_id" property="prjId" jdbcType="INTEGER"/>
        <result column="release_state" property="releaseState" jdbcType="INTEGER"/>
        <result column="public_description" property="publicDescription" jdbcType="VARCHAR"/>
        <result column="sampleTypeString" property="sampleTypeString" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="release_state" property="releaseState" jdbcType="INTEGER"/>
        <association property="sampleType" javaType="SampleType">
            <id column="sample_type_id" property="sampleTypeId" jdbcType="INTEGER"/>
            <result column="attribute_table" property="attributeTable" jdbcType="VARCHAR"/>
            <result column="sample_type_name" property="sampleTypeName" jdbcType="VARCHAR"/>
        </association>
        <association property="taxon" javaType="Taxon">
            <id column="tax_id" property="taxonId" jdbcType="INTEGER"/>
            <result column="name_txt" property="name" jdbcType="VARCHAR"/>
            <result column="ranks" property="ranks" jdbcType="VARCHAR"/>
            <result column="genbank_common_name" property="genBankCommonName" jdbcType="VARCHAR"/>
            <collection property="commonNames" ofType="string" javaType="list">
                <result column="common_name" jdbcType="VARCHAR"/>
            </collection>
            <collection property="synonymNames" ofType="string" javaType="list">
                <result column="synonym_name" jdbcType="VARCHAR"/>
            </collection>
        </association>
        <association property="submitter" javaType="Submitter">
            <id column="submitter_id" property="submitterId" jdbcType="INTEGER"/>
            <result column="first_name" property="firstName" jdbcType="VARCHAR"/>
            <result column="middle_name" property="middleName" jdbcType="VARCHAR"/>
            <result column="last_name" property="lastName" jdbcType="VARCHAR"/>
            <result column="email" property="email" jdbcType="VARCHAR"/>
            <result column="email_secondary" property="emailSecondary" jdbcType="VARCHAR"/>
            <result column="organization" property="organization" jdbcType="VARCHAR"/>
            <result column="submit_organization_url" property="submitOrganizationUrl" jdbcType="VARCHAR"/>
            <result column="department" property="department" jdbcType="VARCHAR"/>
            <result column="phone" property="phone" jdbcType="VARCHAR"/>
            <result column="fax" property="fax" jdbcType="VARCHAR"/>
            <result column="street" property="street" jdbcType="VARCHAR"/>
            <result column="city" property="city" jdbcType="VARCHAR"/>
            <result column="state" property="state" jdbcType="VARCHAR"/>
            <result column="postal_code" property="postalCode" jdbcType="INTEGER"/>
            <association property="country" javaType="Country">
                <id column="country_id" property="countryId" jdbcType="INTEGER"/>
                <result column="country_name" property="countryName" jdbcType="VARCHAR"/>
            </association>
        </association>
    </resultMap>
    <resultMap id="Sample1" type="Sample">
        <id column="sample_id" property="sampleId" jdbcType="INTEGER"/>
        <result column="accession" property="accession" jdbcType="VARCHAR"/>
        <result column="title" property="title" jdbcType="VARCHAR"/>
        <result column="user_id" property="userId" jdbcType="INTEGER"/>
        <result column="taxon_id" property="taxonId" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
    </resultMap>

    <resultMap id="Sample2" type="Sample">
        <id column="sample_id" property="sampleId" jdbcType="INTEGER"/>
        <result column="accession" property="accession" jdbcType="VARCHAR"/>
        <result column="title" property="title" jdbcType="VARCHAR"/>
        <result column="user_id" property="userId" jdbcType="INTEGER"/>
        <result column="taxon_id" property="taxonId" jdbcType="INTEGER"/>
        <result column="release_state" property="releaseState" jdbcType="INTEGER"/>
    </resultMap>
    <resultMap id="SampleCounts" type="SampleCounts">
        <result column="month" property="month" jdbcType="VARCHAR"/>
        <result column="counts" property="counts" jdbcType="INTEGER"/>

    </resultMap>
    <select id="listSamplesByPrjAcc" parameterType="java.lang.String" resultMap="Sample1">
        SELECT
            s.sample_id,
            s.accession,
            s.user_id,
            s.title,
            s.taxon_id,
			s.status
        FROM sample s
            LEFT JOIN project p ON p.prj_id = s.prj_id
        WHERE p.accession = #{accession} AND s.accession != '' and s.status in (2,3)
        ORDER BY s.accession DESC
    </select>
    <select id="getPrjIdBySampleId" parameterType="int" resultType="int">
        SELECT prj_id
        FROM sample
        WHERE sample_id = #{sampleId}
    </select>
    <update id="updateReleaseStateById" parameterType="int">
        UPDATE sample
        SET release_state = 2, modify_time = NOW()
        WHERE sample_id = #{sampleId}
    </update>

    <select id="listAllSamplesByUserId" parameterType="int" resultMap="Sample">
        SELECT
            sm.sample_id,
            sm.accession,
            sm.name,
            sm.title,
            sm.user_id,
            sm.status,
            s.*,
            c.*,
            st.*,
            tx.tax_id,
            tx.name_txt,
            tn.name_txt  AS genbank_common_name,
            tn2.ranks,
            tn1.name_txt AS common_name,
            tn3.name_txt AS synonym_name
        FROM sample sm
            LEFT JOIN submitter s ON sm.submitter_id = s.submitter_id
            LEFT JOIN country c ON c.country_id = s.country_id
            LEFT JOIN sample_type st ON sm.sample_type_id = st.sample_type_id
            LEFT JOIN taxon_name tx ON sm.taxon_id = tx.tax_id AND tx.name_class = 'scientific name'
            LEFT JOIN taxon_name tn ON sm.taxon_id = tn.tax_id AND tn.name_class = 'genbank common name'
            LEFT JOIN taxon_name tn1 ON sm.taxon_id = tn1.tax_id AND tn1.name_class = 'common name'
            LEFT JOIN taxon_name tn3 ON sm.taxon_id = tn3.tax_id AND tn3.name_class = 'synonym'
            LEFT JOIN taxon_node tn2 ON sm.taxon_id = tn2.tax_id
        WHERE sm.user_id = #{userId} AND sm.taxon_id >= 0
        ORDER BY create_time DESC
    </select>
    <select id="getSampleByAccession" parameterType="java.lang.String" resultMap="Sample">
        SELECT
            sm.sample_id,
            sm.accession,
            sm.name,
            sm.title,
            sm.user_id,
            sm.status,
            sm.public_description,
            sm.status,
            sm.release_state,
            sm.prj_id,
            s.*,
            c.*,
            st.*,
            tx.tax_id,
            tx.name_txt,
            tn.name_txt  AS genbank_common_name,
            tn2.ranks,
            tn1.name_txt AS common_name,
            tn3.name_txt AS synonym_name
        FROM sample sm
            LEFT JOIN submitter s ON sm.submitter_id = s.submitter_id
            LEFT JOIN country c ON c.country_id = s.country_id
            LEFT JOIN sample_type st ON sm.sample_type_id = st.sample_type_id
            LEFT JOIN taxon_name tx ON sm.taxon_id = tx.tax_id AND tx.name_class = 'scientific name'
            LEFT JOIN taxon_name tn ON sm.taxon_id = tn.tax_id AND tn.name_class = 'genbank common name'
            LEFT JOIN taxon_name tn1 ON sm.taxon_id = tn1.tax_id AND tn1.name_class = 'common name'
            LEFT JOIN taxon_name tn3 ON sm.taxon_id = tn3.tax_id AND tn3.name_class = 'synonym'
            LEFT JOIN taxon_node tn2 ON sm.taxon_id = tn2.tax_id
        WHERE sm.accession = #{accession} AND sm.taxon_id >= 0 and sm.status
        ORDER BY create_time DESC
    </select>

    <select id="getSamplesByTerm" parameterType="java.lang.String" resultMap="Sample">
        SELECT
            sm.sample_id,
            sm.accession,
            sm.name,
            sm.title,
            sm.user_id,
            s.*,
            c.*,
            st.*,
            tx.tax_id,
            tx.name_txt,
            tn.name_txt  AS genbank_common_name,
            tn2.ranks,
            tn1.name_txt AS common_name,
            tn3.name_txt AS synonym_name
        FROM sample sm
            LEFT JOIN submitter s ON sm.submitter_id = s.submitter_id
            LEFT JOIN country c ON c.country_id = s.country_id
            LEFT JOIN sample_type st ON sm.sample_type_id = st.sample_type_id
            LEFT JOIN taxon_name tx ON sm.taxon_id = tx.tax_id AND tx.name_class = 'scientific name'
            LEFT JOIN taxon_name tn ON sm.taxon_id = tn.tax_id AND tn.name_class = 'genbank common name'
            LEFT JOIN taxon_name tn1 ON sm.taxon_id = tn1.tax_id AND tn1.name_class = 'common name'
            LEFT JOIN taxon_name tn3 ON sm.taxon_id = tn3.tax_id AND tn3.name_class = 'synonym'
            LEFT JOIN taxon_node tn2 ON sm.taxon_id = tn2.tax_id
        WHERE sm.taxon_id IN (SELECT tax_id
                              FROM taxon_name
                              WHERE name_txt LIKE concat('%', #{name}, '%') AND
                                    (name_class = 'scientific name' OR name_class = 'genbank common name' OR
                                     name_class = 'common name'))
              AND sm.taxon_id >= 0
        ORDER BY create_time DESC
    </select>

    <select id="getSamplesByTaxId" parameterType="Integer" resultMap="Sample">
        SELECT
        sm.sample_id,
        sm.accession,
        sm.name,
        sm.title,
        sm.user_id,
        s.*,
        c.*,
        st.*,
        tx.tax_id,
        tx.name_txt,
        tn.name_txt  AS genbank_common_name,
        tn2.ranks,
        tn1.name_txt AS common_name,
        tn3.name_txt AS synonym_name
        FROM sample sm
        LEFT JOIN submitter s ON sm.submitter_id = s.submitter_id
        LEFT JOIN country c ON c.country_id = s.country_id
        LEFT JOIN sample_type st ON sm.sample_type_id = st.sample_type_id
        LEFT JOIN taxon_name tx ON sm.taxon_id = tx.tax_id AND tx.name_class = 'scientific name'
        LEFT JOIN taxon_name tn ON sm.taxon_id = tn.tax_id AND tn.name_class = 'genbank common name'
        LEFT JOIN taxon_name tn1 ON sm.taxon_id = tn1.tax_id AND tn1.name_class = 'common name'
        LEFT JOIN taxon_name tn3 ON sm.taxon_id = tn3.tax_id AND tn3.name_class = 'synonym'
        LEFT JOIN taxon_node tn2 ON sm.taxon_id = tn2.tax_id
        WHERE sm.taxon_id = #{taxId}
        AND sm.taxon_id >= 0
        ORDER BY create_time DESC
    </select>

    <select id="getSamplesByTag" parameterType="java.lang.String" resultMap="Sample1">
        SELECT
        c.sample_id,c.accession,c.taxon_id
        FROM
        sample_tag a
        left join sample_has_sampletag b on b.tag_id=a.tag_id
        left join sample c on c.sample_id=b.sample_id
        WHERE
        a.tag_name='Coronaviridae' and c.status=3 and c.release_state=2
    </select>
    <select id="findSampleById" parameterType="Integer" resultMap="Sample2">
		SELECT *
		from sample
		WHERE sample_id=#{sampleId}
	</select>
    <update id="releaseSampleStatus" parameterType="Sample">
		UPDATE sample set release_time=NOW(), release_state=2,status=3,modify_time = NOW() WHERE sample_id=#{ sampleId }
	</update>
    <select id="getSampleByUuid" parameterType="Sample" resultMap="Sample1">
        SELECT s.*
        from sample s,user u
        where s.status!=5 and s.user_id=u.user_id and u.cas_user_id = #{casUserId} and s.accession=#{accession}
    </select>
    <select id="getSampleIdByAccession" parameterType="java.lang.String" resultMap="Sample1">
        SELECT * from sample
        WHERE accession = #{accession}
    </select>

    <select id="getSampleCountsTypeAll1" parameterType="java.lang.String" resultMap="SampleCounts">
        select count(1) as counts,DATE_FORMAT(sa.collection_date,'%Y-%m') as month from sample s,sample_has_sampletag ss,sample_attr_pathogen_clinical_host_associated sa
        where s.sample_id=ss.sample_id and s.sample_id=sa.sample_id and  (s.`status` =3 or s.`status`=2) and sa.geographic_location like "%"#{countryName}"%" and s.taxon_id=2697049
        group by month
    </select>
    <select id="getSampleCountsType1" parameterType="java.lang.String" resultMap="SampleCounts">
        select count(1) as counts,DATE_FORMAT(sa.collection_date,'%Y-%m') as month from sample s,sample_has_sampletag ss,sample_attr_pathogen_clinical_host_associated sa
        where s.sample_id=ss.sample_id and s.sample_id=sa.sample_id and s.`status` =3 and s.`release_state`=2 and sa.geographic_location like "%"#{countryName}"%" and s.taxon_id=2697049
        group by month
    </select>
    <select id="getSampleCountsTypeAll7" parameterType="java.lang.String" resultMap="SampleCounts">
        select count(1) as counts,DATE_FORMAT(sa.collection_date,'%Y-%m') as month from sample s,sample_has_sampletag ss,sample_attr_virus sa
        where s.sample_id=ss.sample_id and s.sample_id=sa.sample_id and  (s.`status` =3 or s.`status`=2) and sa.geographic_location like "%"#{countryName}"%" and s.taxon_id=2697049
        group by month
    </select>
    <select id="getSampleCountsType7" parameterType="java.lang.String" resultMap="SampleCounts">
        select count(1) as counts,DATE_FORMAT(sa.collection_date,'%Y-%m') as month from sample s,sample_has_sampletag ss,sample_attr_virus sa
        where s.sample_id=ss.sample_id and s.sample_id=sa.sample_id and s.`status` =3 and s.`release_state`=2 and sa.geographic_location like "%"#{countryName}"%" and s.taxon_id=2697049
        group by month
    </select>
    <select id="getSampleCountsTypeAll8" parameterType="java.lang.String" resultMap="SampleCounts">
        select count(1) as counts,DATE_FORMAT(sa.collection_date,'%Y-%m') as month from sample s,sample_has_sampletag ss,sample_attr_metagenome_environmental sa
        where s.sample_id=ss.sample_id and s.sample_id=sa.sample_id and  (s.`status` =3 or s.`status`=2) and sa.geographic_location like "%"#{countryName}"%" and s.taxon_id=2697049
        group by month
    </select>
    <select id="getSampleCountsType8" parameterType="java.lang.String" resultMap="SampleCounts">
        select count(1) as counts,DATE_FORMAT(sa.collection_date,'%Y-%m') as month from sample s,sample_has_sampletag ss,sample_attr_metagenome_environmental sa
        where s.sample_id=ss.sample_id and s.sample_id=sa.sample_id and s.`status` =3 and s.`release_state`=2 and sa.geographic_location like "%"#{countryName}"%" and s.taxon_id=2697049
        group by month
    </select>
    <select id="getTaxonCount" parameterType="java.lang.String" resultType="int">
        select count(tax_id) from taxon_name where name_txt=#{name_txt} and name_class='scientific name'
    </select>
    <select id="getTaxonId" parameterType="java.lang.String" resultType="int">
        select tax_id from taxon_name where name_txt=#{name_txt} and name_class='scientific name'
    </select>

    <update id="reviewSample" parameterType="SampleReview">
		UPDATE sample set status=3,modify_time = NOW() WHERE sample_id=#{ sampleId }
	</update>


    <insert id="saveSampleByHuman" parameterType="SampleSynchronization" >
        <selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="sampleId">
            SELECT LAST_INSERT_ID() as sampleId
        </selectKey>
        INSERT INTO
        sample(user_id,prj_id,submitter_id,name,taxon_id,sample_type_id,is_controlled,title,release_time,public_description,create_time,status,
        release_state,is_release_immediately,submissionId,submission_type,submission_status,batch_option,is_synchronization,synchronization_accession,synchronization_time,attributes,is_controlled_access,other_db,accession_in_other_db,url_in_other_db)
        VALUES(
        #{userId,jdbcType=INTEGER},
        #{prjId,jdbcType=INTEGER},
        #{submitterId,jdbcType=INTEGER},
        #{name,jdbcType=VARCHAR},
        #{taxonId,jdbcType=INTEGER},
        #{sampleTypeId,jdbcType=INTEGER},
        #{isControlled,jdbcType=INTEGER},
        #{title,jdbcType=VARCHAR},
        #{releaseTime,jdbcType=TIMESTAMP},
        #{publicDescription,jdbcType=VARCHAR},
        #{createTime,jdbcType=TIMESTAMP},
        #{status,jdbcType=INTEGER},
        #{releaseState,jdbcType=INTEGER},
        #{isReleaseImmediately,jdbcType=INTEGER},
        #{submissionId,jdbcType=VARCHAR},
        #{submissionType,jdbcType=INTEGER},
        #{submissionStatus,jdbcType=INTEGER},
        #{batchOption,jdbcType=INTEGER},
        #{isSynchronization,jdbcType=INTEGER},
        #{synchronizationAccession,jdbcType=VARCHAR},
        #{synchronizationTime,jdbcType=TIMESTAMP},
        #{attributes,jdbcType=OTHER,typeHandler=cn.ac.big.bigd.webservice.utility.JsonTypeHandler},
        #{isControlledAccess,jdbcType=INTEGER},
        #{otherDb,jdbcType=VARCHAR},
        #{accessionInOtherDb,jdbcType=VARCHAR},
        #{urlInOtherDb,jdbcType=VARCHAR}
        )
    </insert>
</mapper>